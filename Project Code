import pandas as pd

data = pd.read_csv('Walmart.csv')
(data.head())

from sklearn.preprocessing import StandardScaler

X = data[['Store', 'Date', 'Holiday_Flag', 'Temperature', 'Fuel_Price', 'CPI', 'Unemployment']] #features
y = data ['Weekly_Sales'] #target variable. 

data_list = np.array(data['Weekly_Sales']).reshape(-1,1)

scaler = StandardScaler()
scaler.fit(data_list)
data_scaled = scaler.transform(data_list)
print(data_scaled)

import matplotlib.pyplot as plt

plt.scatter(data['Fuel_Price'],data_scaled)
plt.title('Weekly Sales affected by Fuel Prices')
plt.xlabel('Fuel Prices ')
plt.ylabel('Weekly Sales')
plt.show()

plt.scatter(data['Temperature'],data_scaled)
plt.title('Weekly Sales being affected by Temperature')
plt.xlabel('Temperature ')
plt.ylabel('Weekly Sales')
plt.show()

plt.scatter(data['Unemployment'],data_scaled)
plt.title('Weekly Sales with Unemployment rate')
plt.xlabel('Unemployment ')
plt.ylabel('Weekly Sales')
plt.show()

plt.bar(data['Store'],data['Weekly_Sales'], color = 'green')
plt.title('Weekly Sales in different Stores')
plt.xlabel('Store Number')
plt.ylabel('Weekly Sales')
plt.show()

plt.bar(data['Holiday_Flag'],data['Weekly_Sales'])
plt.title('Weekly Sales during Holidays vs Regular days')
plt.xlabel('Holiday Flag')
plt.ylabel('Weekly Sales')
plt.show()

plt.scatter(data['CPI'],data_scaled)
plt.title('Weekly Sales with CPI')
plt.xlabel('CPI ')
plt.ylabel('Weekly Sales')
plt.show()

import sklearn
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

model = LinearRegression()
X = data[[ 'Temperature', 'Fuel_Price', 'CPI', 'Unemployment']]
y = data [['Weekly_Sales']]

X_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.3)

print('Training Feature Size :- ', X_train.shape )
print('Training Label Size :- ', y_train.shape )
print('Testing Feature Size :- ', X_test.shape )
print('Testing Label Size :- ', y_test.shape )

model.fit(X_train, y_train)
y_predict = model.predict(X_test)

print(y_predict)

print('Intercept: \n', model.intercept_)
print('Coefficients: \n', model.coef_)

from sklearn.metrics import accuracy_score
model.score(X_test, y_test)




It is a classifier that conatin a number of decision tree on various subsets of the given dataset and takes the average to improve the predictive accuracy of that dataset.

import numpy as nm
import matplotlib.pyplot as mtp
​
e
X_train, X_test, y_train, y_test = train_test_split(X, y,test_size=0.25,random_state=0)
​
#scaling
​
x
st_x=StandardScaler()
x
X_train = st_x.fit_transform(X_train)
X_test = st_x.transform(X_test)
Now, we will fit the random forest algorithm to the training set

from sklearn.ensemble import RandomForestClassifier
n_estimators: criterion:

classifier = RandomForestClassifier(n_estimators=10,criterion='entropy')
classifier.fit(X_train,encoded)

RandomForestClassifier
RandomForestClassifier(criterion='entropy', n_estimators=10)
y_pred=classifier.predict(X_test)
print(y_pred)
[ 525 1615 1265 ... 4713  931 1520]
Now, we will create confusion matrix to determine the correct and incorrect predictions.

s import confusion_matrix
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test.shape,y_pred.shape)
print(cm)
